// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model Event {
  id        Int      @id @default(autoincrement())
  streamId String
  type      String
  payload   Json
  createdAt DateTime @default(now())
}

model ApplyingProjectionUpdater{
  id Int @id @default(autoincrement())
  applyingId String @unique()
  recruitmentId String 
  userId String 
  firstPickUpOptionPrefecture String
  firstPickUpOptionAddress String
  firstPickUpOptionDescription String
  status String
  secondPickUpOptionPrefecture String
  secondPickUpOptionAddress String
  secondPickUpOptionDescription String
  thirdPickUpOptionPrefecture String
  thirdPickUpOptionAddress String
  thirdPickUpOptionDescription String
  determinePickUpOption Int?
  determinePickUpDateTime DateTime?
  recruitment RecruitmentProjectionUpdater @relation(fields: [recruitmentId],references: [recruitmentId])
@@unique([recruitmentId,userId])
@@index([recruitmentId])
}

model RecruitmentProjectionUpdater{
  id Int @id @default(autoincrement())
  recruitmentId String @unique()
  ownerId String
  destinationLatitude String
  destinationLongitude String
  destinationPrefecture String
  destinationAddress String
  destinationDescription String
  depatureLatitude String
  depatureLongitude String
  depaturePrefecture String
  depatureAddress String
  depatureDescription String
  startDateTime DateTime
  endDateTime DateTime
  maxParticipant Int
  budget Int
  description String
  applyingEndDateTime DateTime
  applyingProjectionUpdater ApplyingProjectionUpdater[]
  @@index([startDateTime(sort: Desc)])
}